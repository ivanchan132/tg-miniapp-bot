import os
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, MenuButtonWebApp
from telegram.ext import Application, CommandHandler, ContextTypes

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
TOKEN = os.getenv("TOKEN", "").strip()  # —Ç–æ–∫–µ–Ω –∑–∞–¥–∞–¥–∏–º –Ω–∞ Railway –≤ Variables
MINI_APP_URL = os.getenv("MINI_APP_URL", "https://example.com/")  # —Å—é–¥–∞ –ø–æ–∑–∂–µ –ø–æ—Å—Ç–∞–≤–∏–º GitHub Pages URL

# ====== –õ–û–ì–ò ======
logging.basicConfig(format="%(asctime)s | %(levelname)s | %(message)s", level=logging.INFO)
log = logging.getLogger("bot")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("Open Gift", web_app=WebAppInfo(url=MINI_APP_URL))]]
    )
    text = "–ü—Ä–∏–≤–µ—Ç! üëã –ñ–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø."
    if update.message:
        await update.message.reply_text(text, reply_markup=kb)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=kb)

async def on_startup(app: Application):
    # –≤—ã–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —á—Ç–æ–±—ã polling —Ä–∞–±–æ—Ç–∞–ª —Å—Ç–∞–±–∏–ª—å–Ω–æ
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        log.info("Webhook deleted.")
    except Exception as e:
        log.warning("Webhook delete failed: %s", e)

    # —Å—Ç–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –º–∏–Ω–∏-–∞–ø–ø–∞ –≤ –º–µ–Ω—é —á–∞—Ç–∞ (‚ãØ)
    try:
        await app.bot.set_chat_menu_button(
            menu_button=MenuButtonWebApp(text="Open Gift", web_app=WebAppInfo(url=MINI_APP_URL))
        )
    except Exception as e:
        log.warning("Menu button set failed: %s", e)

def main():
    if not TOKEN:
        raise RuntimeError("TOKEN –ø—É—Å—Ç. –ó–∞–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.post_init = on_startup
    log.info("Starting polling‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
