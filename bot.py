import os
import logging
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton,
    WebAppInfo, MenuButtonWebApp
)
from telegram.ext import Application, CommandHandler, ContextTypes

# ====== –ù–ê–°–¢–†–û–ô–ö–ò –ò –û–ö–†–£–ñ–ï–ù–ò–ï ======
TOKEN        = os.getenv("TOKEN", "").strip()                     # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
MINI_APP_URL = os.getenv("MINI_APP_URL", "https://example.com/")  # URL —Ç–≤–æ–µ–≥–æ –º–∏–Ω–∏-–∞–ø–ø–∞
ADMIN_ID     = int(os.getenv("ADMIN_ID", "1031115105") or 0)               # —Ç–≤–æ–π Telegram ID (–∫–æ–º—É —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)

# ====== –õ–û–ì–ò ======
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s",
    level=logging.INFO
)
log = logging.getLogger("bot")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start: –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –º–∏–Ω–∏-–∞–ø–ø–∞ –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –∞–¥–º–∏–Ω—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    chat_id = update.effective_chat.id

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–∞–ø–ø–∞
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("Open Gift", web_app=WebAppInfo(url=MINI_APP_URL))]]
    )
    await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–∏–≤–µ—Ç! –û—Ç–∫—Ä–æ–π –º–∏–Ω–∏-–∞–ø–ø üéÅ", reply_markup=kb)

    # –ü—Ä–∏—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞
    if ADMIN_ID:
        username = f"@{user.username}" if user and user.username else f"{user.first_name or ''} {user.last_name or ''}".strip()
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\nID: {user.id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username or '‚Äî'}"
        )
    log.info("User started: id=%s, username=%s", user.id, user.username)


async def on_startup(app: Application):
    """–û—Ç–∫–ª—é—á–∞–µ–º webhook –∏ —Å—Ç–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –º–∏–Ω–∏-–∞–ø–ø–∞ –≤ –º–µ–Ω—é (‚ãØ)."""
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        log.info("Webhook deleted.")
    except Exception as e:
        log.warning("Webhook delete failed: %s", e)

    try:
        await app.bot.set_chat_menu_button(
            menu_button=MenuButtonWebApp(text="Open Gift", web_app=WebAppInfo(url=MINI_APP_URL))
        )
        log.info("Menu button set.")
    except Exception as e:
        log.warning("Menu button set failed: %s", e)


def main():
    if not TOKEN:
        raise RuntimeError("TOKEN –ø—É—Å—Ç. –ó–∞–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.post_init = on_startup

    log.info("Starting polling‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
