import os
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, MenuButtonWebApp
from telegram.ext import Application, CommandHandler, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN", "").strip()  # —Ç–æ–∫–µ–Ω –∑–∞–¥–∞—ë—à—å –Ω–∞ Railway –≤ Variables
MINI_APP_URL = os.getenv("MINI_APP_URL", "https://example.com/")  # URL –º–∏–Ω–∏-–∞–ø–ø–∞
OWNER_ID = int(os.getenv("OWNER_ID", "0") or 0)  # —Ç–≤–æ–π Telegram ID, —á—Ç–æ–±—ã –±–æ—Ç —Å–ª–∞–ª —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

# === –õ–û–ì–ò ===
logging.basicConfig(format="%(asctime)s | %(levelname)s | %(message)s", level=logging.INFO)
log = logging.getLogger("bot")

# === –•–µ–Ω–¥–ª–µ—Ä /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = f"@{user.username}" if user.username else user.first_name

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –º–∏–Ω–∏-–∞–ø–ø–æ–º
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("Open Gift", web_app=WebAppInfo(url=MINI_APP_URL))]]
    )
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–∫—Ä–æ–π –º–∏–Ω–∏-–∞–ø–ø üéÅ", reply_markup=kb)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if OWNER_ID:
        await context.bot.send_message(
            chat_id=OWNER_ID,
            text=f"–ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞!\nID: {user_id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}"
        )

    log.info("User started bot: id=%s, name=%s", user_id, username)


async def on_startup(app: Application):
    # —Å–Ω–∏–º–∞–µ–º webhook
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass

    # —Å—Ç–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é (‚ãØ)
    try:
        await app.bot.set_chat_menu_button(
            menu_button=MenuButtonWebApp(text="Open Gift", web_app=WebAppInfo(url=MINI_APP_URL))
        )
    except Exception:
        pass


def main():
    if not TOKEN:
        raise RuntimeError("TOKEN –ø—É—Å—Ç. –ó–∞–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.post_init = on_startup
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
